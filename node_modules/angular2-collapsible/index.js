import { Component, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Injectable, Input, NgModule, Output, ViewChildren } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs/Rx';
import { animate, state, style, transition, trigger } from '@angular/animations';
import { DomSanitizer } from '@angular/platform-browser';

var CollapsibleService = (function () {
    function CollapsibleService() {
        this.headers = new Array();
        this.bodies = new Array();
    }
    /**
     * @return {?}
     */
    CollapsibleService.prototype.getType = function () {
        return this.type;
    };
    /**
     * @param {?} type
     * @return {?}
     */
    CollapsibleService.prototype.setType = function (type) {
        this.type = type;
    };
    /**
     * @return {?}
     */
    CollapsibleService.prototype.getCollapsibleTable = function () {
        return this.collapsibleTable;
    };
    /**
     * @param {?} table
     * @return {?}
     */
    CollapsibleService.prototype.setCollapsibleTable = function (table) {
        this.collapsibleTable = table;
    };
    /**
     * @param {?} header
     * @return {?}
     */
    CollapsibleService.prototype.addListHeader = function (header) {
        this.headers.push(header);
    };
    /**
     * @param {?} body
     * @return {?}
     */
    CollapsibleService.prototype.addListBody = function (body) {
        this.bodies.push(body);
    };
    /**
     * @return {?}
     */
    CollapsibleService.prototype.collapseAll = function () {
        this.bodies.forEach(function (collapsibleBodyComponent) {
            // set 'expanded' properties of all the CollapsibleBodyComponents to 'false'
            collapsibleBodyComponent.expanded = false;
            collapsibleBodyComponent.expandedState = collapsibleBodyComponent.expanded.toString();
            // emit 'toggleState' event for all the CollapsibleBodyComponents
            collapsibleBodyComponent.toggleState.emit(false);
        });
    };
    return CollapsibleService;
}());
CollapsibleService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CollapsibleService.ctorParameters = function () { return []; };

var CollapsibleEvent = (function () {
    function CollapsibleEvent() {
    }
    return CollapsibleEvent;
}());
var CollapsibleEventService = (function () {
    function CollapsibleEventService() {
        this.toggleCollapsibleItemSource = new Subject();
        // Observable string streams
        this.toggleCollapsibleItem$ = this.toggleCollapsibleItemSource.asObservable();
    }
    /**
     * @param {?=} event
     * @return {?}
     */
    CollapsibleEventService.prototype.toggleCollapsibleItem = function (event) {
        this.toggleCollapsibleItemSource.next(event);
    };
    /**
     * @return {?}
     */
    CollapsibleEventService.prototype.unsubscribe = function () {
        this.toggleCollapsibleItemSource.unsubscribe();
    };
    return CollapsibleEventService;
}());
CollapsibleEventService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CollapsibleEventService.ctorParameters = function () { return []; };

var CollapsibleAnimationsService = (function () {
    function CollapsibleAnimationsService() {
    }
    /**
     * @param {?} triggerName
     * @return {?}
     */
    CollapsibleAnimationsService.collapsibleBodyAnimations = function (triggerName) {
        return [
            trigger(triggerName, [
                state('*', style({
                    height: 0,
                    paddingTop: 0,
                    paddingBottom: 0,
                    borderBottom: 'none',
                    boxShadow: 'none',
                    overflow: 'hidden'
                })),
                state('true', style({
                    boxShadow: 'inset 0 4px 4px -2px rgb(208, 208, 208), inset 0 -3px 2px -1px rgb(208, 208, 208)',
                    overflow: 'inherit'
                })),
                transition('* => true', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeInQuad)),
                transition('* => false', animate(CollapsibleAnimationsService.collapsibleBodyAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeOutQuad))
            ])
        ];
    };
    return CollapsibleAnimationsService;
}());
CollapsibleAnimationsService.collapsibleBodyAnimationDuration = '0.2s';
CollapsibleAnimationsService.easeInQuad = 'cubic-bezier(0.55, 0.085, 0.68, 0.53)';
CollapsibleAnimationsService.easeOutQuad = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
CollapsibleAnimationsService.collapsibleTableRowAnimationDuration = '0.2s';
/*
static collapsibleTableRowAnimations(triggerName: string): AnimationTriggerMetadata[] {
    return [
        trigger(triggerName, [
            state('active', style({
                background: 'rgba(0, 0, 0, 0.15)'
            })),
            state('inactive', style({
                background: 'transparent'
            })),
            transition('* => active',
                animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeOutQuad)),
            transition('* => inactive',
                animate(CollapsibleAnimationsService.collapsibleTableRowAnimationDuration + ' ' +
                    CollapsibleAnimationsService.easeOutQuad))
        ])
    ];
}
*/
CollapsibleAnimationsService.decorators = [
    { type: Injectable },
];
/**
 * @nocollapse
 */
CollapsibleAnimationsService.ctorParameters = function () { return []; };

var CollapsibleBodyComponent = (function () {
    /**
     * @param {?} el
     * @param {?} collapsibleService
     * @param {?} eventService
     */
    function CollapsibleBodyComponent(el, collapsibleService, eventService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        this.eventService = eventService;
        this.toggleState = new EventEmitter();
    }
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.eventService.toggleCollapsibleItem$.subscribe(function () {
            _this.toggleCollapsibleItem();
        });
    };
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.hasContent = function () {
        for (var _i = 0, _a = this.el.nativeElement.childNodes; _i < _a.length; _i++) {
            var child = _a[_i];
            if (((child)).tagName != null) {
                return true;
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.toggleCollapsibleItem = function () {
        // toggle body's state only if it has any childs
        if (this.hasContent()) {
            if (this.collapsibleService.getType() === 'accordion') {
                var /** @type {?} */ tempExpanded = this.expanded;
                this.collapsibleService.collapseAll();
                this.expanded = tempExpanded;
            }
            this.expanded = !this.expanded;
            this.expandedState = this.expanded.toString();
            // emit 'toggleState' event
            this.toggleState.emit(this.expanded);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.ngOnChanges = function (changes) {
        if (this.hasContent()) {
            for (var _i = 0, _a = Object.keys(changes); _i < _a.length; _i++) {
                var key = _a[_i];
                if (key === 'expanded' &&
                    changes.expanded.currentValue != null) {
                    // this.expanded = changes.expanded.currentValue;
                    this.expandedState = this.expanded.toString();
                }
            }
        }
    };
    /**
     * @return {?}
     */
    CollapsibleBodyComponent.prototype.ngOnDestroy = function () {
        this.eventService.unsubscribe();
    };
    return CollapsibleBodyComponent;
}());
CollapsibleBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-body',
                template: "<ng-content></ng-content>",
                styles: ["\n        :host {\n            display: block;\n            border-bottom: 1px solid #ddd;\n            box-sizing: border-box;\n            padding: 2rem;\n        }\n\n        .side-nav :host {\n            padding: 0;\n        }\n\n        .side-nav :host,\n        .side-nav.fixed :host {\n            border: 0;\n            background-color: #fff;\n        }\n    "],
                animations: CollapsibleAnimationsService.collapsibleBodyAnimations('collapsibleBodyState')
            },] },
];
/**
 * @nocollapse
 */
CollapsibleBodyComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: CollapsibleService, },
    { type: CollapsibleEventService, },
]; };
CollapsibleBodyComponent.propDecorators = {
    'expandedState': [{ type: HostBinding, args: ['@collapsibleBodyState',] },],
    'expanded': [{ type: Input },],
    'toggleState': [{ type: Output },],
};

var CollapsibleListItemComponent = (function () {
    /**
     * @param {?} collapsibleService
     */
    function CollapsibleListItemComponent(collapsibleService) {
        this.collapsibleService = collapsibleService;
    }
    /**
     * @return {?}
     */
    CollapsibleListItemComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        // store list bodies in 'CollapsibleService'
        this.contentListBodies.forEach(function (item) {
            _this.collapsibleService.addListBody(item);
        });
    };
    return CollapsibleListItemComponent;
}());
CollapsibleListItemComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-list-item',
                template: "\n        <ng-content select=\"collapsible-header\"></ng-content>\n        <ng-content select=\"collapsible-body\"></ng-content>\n    ",
                providers: [CollapsibleEventService]
            },] },
];
/**
 * @nocollapse
 */
CollapsibleListItemComponent.ctorParameters = function () { return [
    { type: CollapsibleService, },
]; };
CollapsibleListItemComponent.propDecorators = {
    'contentListBodies': [{ type: ContentChildren, args: [CollapsibleBodyComponent,] },],
};

var CollapsibleListComponent = (function () {
    /**
     * @param {?} collapsibleService
     */
    function CollapsibleListComponent(collapsibleService) {
        this.collapsibleService = collapsibleService;
        // component options
        //
        // describes the type of the collapsible list: 'accordion' or 'expandable'
        this.type = 'accordion';
    }
    /**
     * @return {?}
     */
    CollapsibleListComponent.prototype.ngOnInit = function () {
        this.collapsibleService.setType(this.type);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CollapsibleListComponent.prototype.ngOnChanges = function (changes) {
        for (var /** @type {?} */ change in changes) {
            if (change === 'type') {
                this.type = changes.type.currentValue;
                this.collapsibleService.setType(this.type);
            }
        }
    };
    return CollapsibleListComponent;
}());
CollapsibleListComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-list',
                template: "<ng-content select=\"collapsible-list-item\"></ng-content>",
                styles: ["\n    :host {\n      display: block;\n      margin: 0.5rem 0 1rem 0;\n      border-top: 1px solid #ddd;\n      border-right: 1px solid #ddd;\n      border-left: 1px solid #ddd;\n      box-shadow: \n        0 2px 2px 0 rgba(0, 0, 0, 0.14),\n        0 1px 5px 0 rgba(0, 0, 0, 0.12),\n        0 3px 1px -2px rgba(0, 0, 0, 0.2);\n    }\n\n    .side-nav :host,\n    .side-nav.fixed :host {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) {\n      border: none;\n      box-shadow: none;\n    }\n\n    :host(.popout) > li {\n      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.16), 0 2px 10px 0 rgba(0, 0, 0, 0.12);\n      margin: 0 24px;\n      transition: margin 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);\n    }\n\n    .side-nav :host {\n      margin: 0;\n    }\n  "],
                providers: [CollapsibleService]
            },] },
];
/**
 * @nocollapse
 */
CollapsibleListComponent.ctorParameters = function () { return [
    { type: CollapsibleService, },
]; };
CollapsibleListComponent.propDecorators = {
    'type': [{ type: Input },],
    'contentListItems': [{ type: ContentChildren, args: [CollapsibleListItemComponent,] },],
};

var CollapsibleHeaderComponent = (function () {
    /**
     * @param {?} eventService
     */
    function CollapsibleHeaderComponent(eventService) {
        this.eventService = eventService;
    }
    /**
     * @return {?}
     */
    CollapsibleHeaderComponent.prototype.click = function () {
        this.eventService.toggleCollapsibleItem();
    };
    return CollapsibleHeaderComponent;
}());
CollapsibleHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-header',
                template: "<ng-content></ng-content>",
                styles: ["\n        :host {\n            display: block;\n            cursor: pointer;\n            min-height: 3rem;\n            line-height: 3rem;\n            padding: 0 1rem;\n            background-color: #fff;\n            border-bottom: 1px solid #ddd;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
CollapsibleHeaderComponent.ctorParameters = function () { return [
    { type: CollapsibleEventService, },
]; };
CollapsibleHeaderComponent.propDecorators = {
    'click': [{ type: HostListener, args: ['click',] },],
};

var CollapsibleTableRowComponent = (function () {
    /**
     * @param {?} el
     * @param {?} sanitizer
     * @param {?} collapsibleService
     */
    function CollapsibleTableRowComponent(el, sanitizer, collapsibleService) {
        this.el = el;
        this.sanitizer = sanitizer;
        this.collapsibleService = collapsibleService;
        this.backgroundTransitionDuration = '0.3s';
        // transition-timing-function: easeInQuad
        this.backgroundTransitionTimingFunction = this.sanitizer
            .bypassSecurityTrustStyle(CollapsibleTableRowComponent.EASE_OUT_QUAD);
        this.isHeadRow = false;
        this.isBodyRow = false;
        this.isOddRow = false;
        this.isEvenRow = false;
        this.isParentStriped = false;
        this.isParentHighlight = false;
        this.parentAllowsSelect = false;
        this.parentAllowsSelectMultipleRows = false;
        this.parentAllowsDeselectingRows = false;
        this.dragSelection = false;
    }
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.ngOnInit = function () {
        var /** @type {?} */ elem = this.el.nativeElement;
        var /** @type {?} */ tbody = elem.parentElement;
        if (tbody.tagName === 'TBODY') {
            var /** @type {?} */ collapsibleTableRows = tbody.querySelectorAll('collapsible-table-row');
            for (var /** @type {?} */ i = 0; i < collapsibleTableRows.length; i++) {
                var /** @type {?} */ collapsibleTableRow = collapsibleTableRows[i];
                if (collapsibleTableRow === elem) {
                    this.index = i + 1;
                    break;
                }
            }
        }
        // retrieve parent CollapsibleTableComponent through the CollapsibleService
        this.parentCollapsibleTable = this.collapsibleService.getCollapsibleTable();
        // check if collapsible-table is marked to show striped table
        this.isParentStriped = this.parentCollapsibleTable.striped;
        // check if collapsible-table is marked to highlight current row
        this.isParentHighlight = this.parentCollapsibleTable.highlight;
        this.parentHighlightRowBackgroundColor = this.parentCollapsibleTable.highlightColor ||
            CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
        this.parentHighlightRowTextColor = this.parentCollapsibleTable.highlightTextColor ||
            CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
        // check if collapsible-table specifies the active row color
        this.activeRowBackgroundColor = this.parentCollapsibleTable.activeColor ||
            CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
        this.activeRowTextColor = this.parentCollapsibleTable.activeTextColor ||
            CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
        // check if collapsible-table allows selecting rows
        this.parentAllowsSelect = this.parentCollapsibleTable.select;
        this.parentAllowsSelectMultipleRows = this.parentCollapsibleTable.selectMultipleRows;
        // check if collapsible-table specifies a color for the selected row
        this.selectedRowBackgroundColor = this.parentCollapsibleTable.selectColor ||
            CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
        this.selectedRowTextColor = this.parentCollapsibleTable.selectTextColor ||
            CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
        // check if collapsible-table allows to deselect rows
        this.parentAllowsDeselectingRows = this.parentCollapsibleTable.allowDeselectingRows != null ?
            this.parentCollapsibleTable.allowDeselectingRows : false;
    };
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.ngAfterContentInit = function () {
        this.updateRow();
    };
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.updateRow = function () {
        var /** @type {?} */ elem = this.el.nativeElement;
        // determine if the row is inside the 'thead'
        var /** @type {?} */ th = elem.querySelector('th');
        if (th != null) {
            this.isHeadRow = true;
        }
        // determine if the row is inside the 'tbody'
        var /** @type {?} */ td = elem.querySelector('td');
        if (td != null) {
            this.isBodyRow = true;
            // determine if the row is 'odd' or 'event'
            if (this.index % 2 === 0) {
                this.isEvenRow = true;
                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedEvenColor ||
                    CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedEvenTextColor ||
                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            }
            else {
                this.isOddRow = true;
                this.parentStripedRowBackgroundColor = this.parentCollapsibleTable.stripedOddColor ||
                    CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                this.parentStripedRowTextColor = this.parentCollapsibleTable.stripedOddTextColor ||
                    CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            }
            switch (true) {
                case this.parentAllowsSelect && this.selected:
                    this.rowBackgroundColor = this.selectedRowBackgroundColor;
                    this.rowTextColor = this.selectedRowTextColor;
                    break;
                case this.isParentStriped:
                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                    this.rowTextColor = this.parentStripedRowTextColor;
                    break;
            }
        }
    };
    /**
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.getHeight = function () {
        return this.el.nativeElement.offsetHeight;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.isLeftMouseButton = function (event) {
        var /** @type {?} */ button = event.button;
        var /** @type {?} */ which = event.which;
        var /** @type {?} */ target = ((event.target || event.srcElement || event.currentTarget));
        if (['TR', 'TD'].includes(target.tagName)) {
            if ('button' in event) {
                return button === 0;
            }
            else {
                return (which || button) === 1;
            }
        }
        return false;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mousedown = function (event) {
        // handle only if the Left mouse button pressed
        // and the row is a body row
        if (this.isLeftMouseButton(event) && this.isBodyRow) {
            if (this.parentCollapsibleTable.noTextSelect) {
                event.preventDefault();
            }
            if (this.isBodyRow) {
                if (this.parentAllowsSelect && !this.parentAllowsDeselectingRows) {
                    this.prevSelectedRows = this.parentCollapsibleTable.selectedRows;
                    this.parentCollapsibleTable.clearSelectedRows();
                    this.parentCollapsibleTable.deselectAllRows();
                }
                this.rowBackgroundColor = this.activeRowBackgroundColor;
                this.rowTextColor = this.activeRowTextColor;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mouseup = function (event) {
        // handle only if the Left mouse button pressed
        // and the row is a body row
        if (this.isLeftMouseButton(event) && this.isBodyRow) {
            // handle selection
            if (this.parentAllowsSelect) {
                if (!this.parentAllowsDeselectingRows) {
                    this.parentCollapsibleTable.selectRow(this.index);
                }
                else {
                    if (!this.dragSelection) {
                        this.parentCollapsibleTable.toggleRowSelection(this.index);
                    }
                }
            }
            // check row state
            this.parentCollapsibleTable.updateTable();
            /*switch (true) {
                // parent allows selecting rows and the row is selected
                case this.parentAllowsSelect && this.selected:
                    this.rowBackgroundColor = this.selectedRowBackgroundColor;
                    this.rowTextColor = this.selectedRowTextColor;
                    this.parentCollapsibleTable.updateTable();
                    break;
                // highlighted
                case this.isParentHighlight:
                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                    this.rowTextColor = this.parentHighlightRowTextColor;
                    break;
                // striped
                case this.isParentStriped:
                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                    this.rowTextColor = this.parentStripedRowTextColor;
                    break;
                default:
                    this.rowBackgroundColor = undefined;
                    this.rowTextColor = undefined;
                    break;
            }*/
            // select multiple rows using the 'Shift' key
            if (this.parentAllowsSelect &&
                this.parentAllowsSelectMultipleRows &&
                event != null && event.shiftKey) {
                if (this.prevSelectedRows != null &&
                    this.prevSelectedRows.length > 0 &&
                    this.parentCollapsibleTable.selectedRows.length > 0) {
                    var /** @type {?} */ rangeSelectedRows = this.prevSelectedRows.concat(this.parentCollapsibleTable.selectedRows);
                    rangeSelectedRows.sort(function (a, b) { return a - b; });
                    var /** @type {?} */ firstRowIndex = Math.min.apply(null, rangeSelectedRows);
                    var /** @type {?} */ lastRowIndex = Math.max.apply(null, rangeSelectedRows);
                    this.parentCollapsibleTable.selectRows(firstRowIndex, lastRowIndex);
                }
            }
            // set dragSelection flag to false. Prevents selection drag behavior
            this.dragSelection = false;
            // focus the collapsible table
            this.parentCollapsibleTable.focus();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mouseenter = function (event) {
        // handle only if the row is a body row
        if (this.isBodyRow) {
            switch (true) {
                // the use is trying to select multiple rows by holding a mouse button
                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                    this.parentCollapsibleTable.selectRow(this.index);
                    this.dragSelection = true;
                    break;
                // parent allows selecting rows and the row is selected
                case this.parentAllowsSelect && this.selected:
                    break;
                // highlighted
                case this.isParentHighlight:
                    this.rowBackgroundColor = this.parentHighlightRowBackgroundColor;
                    this.rowTextColor = this.parentHighlightRowTextColor;
                    break;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.mouseleave = function (event) {
        // handle only if the row is a body row
        if (this.isBodyRow) {
            // check row state
            switch (true) {
                // the use is trying to select multiple rows by holding a mouse button
                case this.parentAllowsSelect && this.parentAllowsSelectMultipleRows && this.parentCollapsibleTable.mouseDownHold:
                    this.parentCollapsibleTable.selectRow(this.index);
                    this.dragSelection = false;
                    break;
                // parent allows selecting rows and the row is selected
                case this.parentAllowsSelect && this.selected:
                    break;
                // stripped
                case this.isParentStriped:
                    this.rowBackgroundColor = this.parentStripedRowBackgroundColor;
                    this.rowTextColor = this.parentStripedRowTextColor;
                    break;
                default:
                    this.rowBackgroundColor = undefined;
                    this.rowTextColor = undefined;
                    break;
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableRowComponent.prototype.click = function (event) {
        if (this.detail != null) {
            var /** @type {?} */ target = ((event.target || event.srcElement || event.currentTarget));
            if (target != null && ['TR', 'TD'].includes(target.tagName)) {
                this.detail.subject.next();
            }
        }
    };
    return CollapsibleTableRowComponent;
}());
CollapsibleTableRowComponent.EASE_OUT_QUAD = 'cubic-bezier(0.25, 0.46, 0.45, 0.94)';
CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR = 'rgba(242,242,242,0.8)';
CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR = 'transparent';
CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR = 'rgba(222,222,222, 0.8)';
CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR = 'rgba(212,212,212, 0.8)';
CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR = 'rgba(212,212,212, 0.8)';
CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR = 'black';
CollapsibleTableRowComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table-row',
                template: "<ng-content></ng-content>",
                styles: ["\n        :host {\n            display: table-row;\n            transition-property: background-color, color;\n        }\n    "],
            },] },
];
/**
 * @nocollapse
 */
CollapsibleTableRowComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: DomSanitizer, },
    { type: CollapsibleService, },
]; };
CollapsibleTableRowComponent.propDecorators = {
    'detail': [{ type: Input },],
    'rowTextColor': [{ type: HostBinding, args: ['style.color',] },],
    'rowBackgroundColor': [{ type: HostBinding, args: ['style.background-color',] },],
    'backgroundTransitionDuration': [{ type: HostBinding, args: ['style.transition-duration',] },],
    'backgroundTransitionTimingFunction': [{ type: HostBinding, args: ['style.transition-timing-function',] },],
    'selected': [{ type: HostBinding, args: ['class.selected',] },],
    'mousedown': [{ type: HostListener, args: ['mousedown', ['$event'],] },],
    'mouseup': [{ type: HostListener, args: ['mouseup', ['$event'],] },],
    'mouseenter': [{ type: HostListener, args: ['mouseenter', ['$event'],] },],
    'mouseleave': [{ type: HostListener, args: ['mouseleave', ['$event'],] },],
    'click': [{ type: HostListener, args: ['click', ['$event'],] },],
};

var CollapsibleTableComponent = (function () {
    /**
     * @param {?} el
     * @param {?} collapsibleService
     */
    function CollapsibleTableComponent(el, collapsibleService) {
        this.el = el;
        this.collapsibleService = collapsibleService;
        // allows navigation between table rows using arrow keys
        this.allowKeyboardNavigation = true;
        this.fixedTableHeight = 'auto';
        this.tabindex = 0;
        this.selectedRows = [];
        // specifies collapsible type. Can be either 'accordion' or 'expandable'
        this.type = 'accordion';
        this.mouseDownHold = false;
    }
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.ngOnInit = function () {
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.ngAfterContentInit = function () {
        // this.updateFixedTableHeight();
        /*
        LOG(`CollapsibleTableComponent::ngOnInit()\n` +
            `this = {\n` +
            `bordered = ${this.bordered}\n` +
            `borderedHorizontally = ${this.borderedHorizontally}\n` +
            `borderedVertically = ${this.borderedVertically}\n` +
            `striped = ${this.striped}\n` +
            `stripedOddColor = ${this.stripedOddColor}\n` +
            `stripedEvenColor = ${this.stripedEvenColor}\n` +
            `highlight = ${this.highlight}\n` +
            `highlightColor = ${this.highlightColor}\n` +
            `highlightTextColor = ${this.highlightTextColor}\n` +
            `activeColor = ${this.activeColor}\n` +
            `activeTextColor = ${this.activeTextColor}\n` +
            `centered = ${this.centered}\n` +
            `responsive = ${this.responsive}\n` +
            `select = ${this.select}\n` +
            `selectColor = ${this.selectColor}\n` +
            `selectTextColor = ${this.selectTextColor}\n` +
            `selectMultipleRows = ${this.selectMultipleRows}\n` +
            `noTextSelect = ${this.noTextSelect}\n` +
            `}`);
            */
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CollapsibleTableComponent.prototype.ngOnChanges = function (changes) {
        for (var /** @type {?} */ change in changes) {
            if (changes.hasOwnProperty(change)) {
                if (this.collapsibleTableRows != null) {
                    switch (change) {
                        case 'striped':
                        case 'stripedOddColor':
                        case 'stripedOddTextColor':
                        case 'stripedEvenColor':
                        case 'stripedEvenTextColor':
                            this.updateTable('striped');
                            break;
                        case 'highlight':
                        case 'highlightColor':
                        case 'highlightTextColor':
                            this.updateTable('highlight');
                            break;
                        case 'activeColor':
                        case 'activeTextColor':
                            this.updateTable('active');
                            break;
                        case 'select':
                        case 'selectColor':
                        case 'selectTextColor':
                        case 'selectMultipleRows':
                        case 'allowDeselectingRows':
                            this.updateTable('select');
                            break;
                    }
                }
                // update collapsible table type in CollapsibleService
                if (change === 'type') {
                    this.type = changes.type.currentValue;
                    this.collapsibleService.setType(this.type);
                }
            }
        }
        this.collapsibleService.setCollapsibleTable(this);
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.focus = function () {
        this.el.nativeElement.focus();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.addSelectedRow = function (index) {
        switch (true) {
            case this.selectMultipleRows && this.selectedRows.indexOf(index) === -1:
                this.selectedRows.push(index);
                this.selectedRows.sort(function (a, b) { return a - b; });
                break;
            case !this.selectMultipleRows:
                this.selectedRows = [];
                this.deselectAllRows();
                this.selectedRows.push(index);
                this.selectedRows.sort(function (a, b) { return a - b; });
                break;
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.removeSelectedRow = function (index) {
        if (this.selectedRows.indexOf(index) !== -1) {
            this.selectedRows.splice(this.selectedRows.indexOf(index), 1);
        }
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.clearSelectedRows = function () {
        this.selectedRows = [];
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.deselectAllRows = function () {
        this.collapsibleTableRows.forEach(function (row) {
            row.selected = false;
            row.updateRow();
        });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.selectRow = function (index) {
        var _this = this;
        if (this.select) {
            switch (true) {
                case index === 0:
                    this.selectRow(1);
                    break;
                case index === this.collapsibleTableRows.length:
                    this.selectRow(this.collapsibleTableRows.length - 1);
                    break;
                case 0 < index && index <= this.collapsibleTableRows.length - 1:
                    this.addSelectedRow(index);
                    this.collapsibleTableRows.forEach(function (row, i) {
                        if (index !== i) {
                            if (!_this.selectMultipleRows) {
                                row.selected = false;
                            }
                        }
                        else {
                            row.selected = true;
                        }
                        row.updateRow();
                    });
                    break;
            }
        }
    };
    /**
     * @param {?} firstRowIndex
     * @param {?} lastRowIndex
     * @return {?}
     */
    CollapsibleTableComponent.prototype.selectRows = function (firstRowIndex, lastRowIndex) {
        var _this = this;
        if (this.selectMultipleRows &&
            0 < firstRowIndex && firstRowIndex < lastRowIndex &&
            lastRowIndex <= this.collapsibleTableRows.length - 1) {
            this.clearSelectedRows();
            this.collapsibleTableRows.forEach(function (row, i) {
                if (firstRowIndex <= i && i <= lastRowIndex) {
                    _this.addSelectedRow(i);
                    row.selected = true;
                }
                else {
                    row.selected = false;
                }
                row.updateRow();
            });
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CollapsibleTableComponent.prototype.toggleRowSelection = function (index) {
        var _this = this;
        if (this.select &&
            0 < index && index <= this.collapsibleTableRows.length - 1) {
            this.collapsibleTableRows.forEach(function (row, i) {
                if (index === i) {
                    if (row.selected) {
                        _this.removeSelectedRow(index);
                    }
                    else {
                        _this.addSelectedRow(index);
                    }
                    row.selected = !row.selected;
                    row.updateRow();
                }
            });
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateStriped = function (row) {
        if (this.striped && row.isBodyRow) {
            row.isParentStriped = true;
            if (row.isOddRow) {
                row.parentStripedRowBackgroundColor = this.stripedOddColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_ODD_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedOddTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
            else {
                row.parentStripedRowBackgroundColor = this.stripedEvenColor || CollapsibleTableRowComponent.DEFAULT_STRIPED_EVEN_ROW_COLOR;
                row.parentStripedRowTextColor = this.stripedEvenTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
                row.rowBackgroundColor = row.parentStripedRowBackgroundColor;
                row.rowTextColor = row.parentStripedRowTextColor;
            }
        }
        else {
            row.isParentStriped = false;
            row.rowBackgroundColor = undefined;
            row.rowTextColor = undefined;
        }
    };
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateHighlight = function (row) {
        row.isParentHighlight = this.highlight;
        row.parentHighlightRowBackgroundColor = this.highlightColor || CollapsibleTableRowComponent.DEFAULT_HIGHLIGHT_ROW_COLOR;
        row.parentHighlightRowTextColor = this.highlightTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateActive = function (row) {
        row.activeRowBackgroundColor = this.activeColor || CollapsibleTableRowComponent.DEFAULT_ACTIVE_ROW_COLOR;
        row.activeRowTextColor = this.activeTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
    };
    /**
     * @param {?} row
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateSelect = function (row) {
        row.parentAllowsSelect = this.select;
        row.parentAllowsSelectMultipleRows = this.selectMultipleRows;
        row.parentAllowsDeselectingRows = this.allowDeselectingRows;
        if (row.selected) {
            row.selectedRowBackgroundColor = this.selectColor || CollapsibleTableRowComponent.DEFAULT_SELECTED_ROW_COLOR;
            row.selectedRowTextColor = this.selectTextColor || CollapsibleTableRowComponent.DEFAULT_ROW_TEXT_COLOR;
            row.rowBackgroundColor = row.selectedRowBackgroundColor;
            row.rowTextColor = row.selectedRowTextColor;
        }
    };
    /**
     * @param {?=} change
     * @return {?}
     */
    CollapsibleTableComponent.prototype.updateTable = function (change) {
        var _this = this;
        if (this.collapsibleTableRows != null) {
            if (change != null) {
                switch (change) {
                    case 'striped':
                        // propagate changes to each of the CollapsibleTableRowComponent children
                        this.collapsibleTableRows.forEach(function (row) { _this.updateStriped(row); });
                        break;
                    case 'highlight':
                        this.collapsibleTableRows.forEach(function (row) { _this.updateHighlight(row); });
                        break;
                    case 'active':
                        this.collapsibleTableRows.forEach(function (row) { _this.updateActive(row); });
                        break;
                    case 'select':
                        this.collapsibleTableRows.forEach(function (row) { _this.updateSelect(row); });
                        break;
                }
            }
            else {
                // propagate changes to each of the CollapsibleTableRowComponent children
                this.collapsibleTableRows.forEach(function (row) {
                    _this.updateStriped(row);
                    _this.updateHighlight(row);
                    _this.updateSelect(row);
                    _this.updateActive(row);
                });
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CollapsibleTableComponent.prototype.keydown = function (event) {
        // select a row only if 'select' property is set to 'true'
        if (this.select && this.allowKeyboardNavigation) {
            var Key = {};
            Key.arrowUp = 38;
            Key.arrowDown = 40;
            Key.home = 36;
            Key.end = 35;
            Key[Key.arrowUp] = "arrowUp";
            Key[Key.arrowDown] = "arrowDown";
            Key[Key.home] = "home";
            Key[Key.end] = "end";
            var /** @type {?} */ index = 1;
            if (Key[event.which] != null) {
                event.preventDefault();
                event.stopPropagation();
                switch (event.which) {
                    case Key.arrowUp:
                        // select previous row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index--;
                        }
                        break;
                    case Key.arrowDown:
                        // select next row
                        if (this.selectedRows.length > 0) {
                            index = this.selectedRows[this.selectedRows.length - 1];
                            index++;
                        }
                        break;
                    case Key.home:
                        index = 1;
                        break;
                    case Key.end:
                        index = this.collapsibleTableRows.length - 1;
                        break;
                }
                this.clearSelectedRows();
                this.deselectAllRows();
                this.selectRow(index);
                this.updateTable();
            }
        }
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.mousedown = function () {
        this.mouseDownHold = true;
    };
    /**
     * @return {?}
     */
    CollapsibleTableComponent.prototype.mouseup = function () {
        this.mouseDownHold = false;
    };
    return CollapsibleTableComponent;
}());
CollapsibleTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table',
                template: "<ng-content></ng-content>",
                styles: ["\n        :host {\n            display: table;\n            position: relative;\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        :host thead {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host /deep/ tbody /deep/ collapsible-table-row {\n            cursor: pointer;\n        }\n        \n        :host /deep/ collapsible-table-row th,\n        :host /deep/ collapsible-table-row td {\n            border-radius: 0;\n        }\n\n        :host[bordered='true'] {\n            border-top: 1px solid #d0d0d0;\n            border-right: 1px solid #d0d0d0;\n            border-left: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row,\n        :host[borderedHorizontally='true'] /deep/ collapsible-table-row {\n            border-bottom: 1px solid #d0d0d0;\n        }\n\n        :host[bordered='true'] /deep/ collapsible-table-row th,\n        :host[bordered='true'] /deep/ collapsible-table-row td,\n        :host[borderedVertically='true'] /deep/ collapsible-table-row th:not(:last-child),\n        :host[borderedVertically='true'] /deep/ collapsible-table-row td:not(:last-child) {\n            border-right: 1px solid #d0d0d0;\n        }\n\n        :host(.centered) /deep/ * {\n            text-align: center;\n        }\n\n        :host(.noTextSelect) /deep/ collapsible-table-row th,\n        :host(.noTextSelect) /deep/ collapsible-table-row td {\n            user-select: none;\n        }        \n    "],
                providers: [
                    CollapsibleService
                ]
            },] },
];
/**
 * @nocollapse
 */
CollapsibleTableComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: CollapsibleService, },
]; };
CollapsibleTableComponent.propDecorators = {
    'bordered': [{ type: Input }, { type: HostBinding, args: ['attr.bordered',] },],
    'borderedHorizontally': [{ type: Input }, { type: HostBinding, args: ['attr.borderedHorizontally',] },],
    'borderedVertically': [{ type: Input }, { type: HostBinding, args: ['attr.borderedVertically',] },],
    'striped': [{ type: Input }, { type: HostBinding, args: ['attr.striped',] },],
    'stripedOddColor': [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddColor',] },],
    'stripedOddTextColor': [{ type: Input }, { type: HostBinding, args: ['attr.stripedOddTextColor',] },],
    'stripedEvenColor': [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenColor',] },],
    'stripedEvenTextColor': [{ type: Input }, { type: HostBinding, args: ['attr.stripedEvenTextColor',] },],
    'highlight': [{ type: Input }, { type: HostBinding, args: ['attr.highlight',] },],
    'highlightColor': [{ type: Input }, { type: HostBinding, args: ['attr.highlightColor',] },],
    'highlightTextColor': [{ type: Input }, { type: HostBinding, args: ['attr.highlightTextColor',] },],
    'activeColor': [{ type: Input }, { type: HostBinding, args: ['attr.activeColor',] },],
    'activeTextColor': [{ type: Input }, { type: HostBinding, args: ['attr.activeTextColor',] },],
    'centered': [{ type: Input }, { type: HostBinding, args: ['class.centered',] }, { type: HostBinding, args: ['attr.centered',] },],
    'responsive': [{ type: Input }, { type: HostBinding, args: ['attr.responsive',] },],
    'select': [{ type: Input }, { type: HostBinding, args: ['attr.select',] },],
    'selectMultipleRows': [{ type: Input }, { type: HostBinding, args: ['attr.selectMultipleRows',] },],
    'selectColor': [{ type: Input }, { type: HostBinding, args: ['attr.selectColor',] },],
    'selectTextColor': [{ type: Input }, { type: HostBinding, args: ['attr.selectTextColor',] },],
    'allowDeselectingRows': [{ type: Input }, { type: HostBinding, args: ['attr.allowDeselectingRows',] },],
    'allowKeyboardNavigation': [{ type: Input }, { type: HostBinding, args: ['attr.allowKeyboardNavigation',] },],
    'noTextSelect': [{ type: Input }, { type: HostBinding, args: ['class.noTextSelect',] }, { type: HostBinding, args: ['attr.noTextSelect',] },],
    'tabindex': [{ type: HostBinding, args: ['attr.tabindex',] },],
    'type': [{ type: Input }, { type: HostBinding, args: ['attr.type',] },],
    'collapsibleTableRows': [{ type: ContentChildren, args: [CollapsibleTableRowComponent,] },],
    'keydown': [{ type: HostListener, args: ['keydown', ['$event'],] },],
    'mousedown': [{ type: HostListener, args: ['mousedown',] },],
    'mouseup': [{ type: HostListener, args: ['mouseup',] },],
};

var CollapsibleTableRowDetailComponent = (function () {
    /**
     * @param {?} collapsibleService
     */
    function CollapsibleTableRowDetailComponent(collapsibleService) {
        this.collapsibleService = collapsibleService;
        this.subject = new Subject();
    }
    /**
     * @return {?}
     */
    CollapsibleTableRowDetailComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.subject.asObservable().subscribe(function () {
            _this.viewListBodies.forEach(function (item) {
                item.toggleCollapsibleItem();
            });
        });
    };
    /**
     * @return {?}
     */
    CollapsibleTableRowDetailComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        // store list bodies in 'CollapsibleService'
        this.viewListBodies.forEach(function (item) {
            _this.collapsibleService.addListBody(item);
        });
    };
    return CollapsibleTableRowDetailComponent;
}());
CollapsibleTableRowDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'collapsible-table-row-detail',
                template: "\n        <td colspan=\"100%\">\n            <collapsible-list-item>\n                <collapsible-body>\n                    <ng-content></ng-content>\n                </collapsible-body>\n            </collapsible-list-item>\n        </td>\n    ",
                styles: ["\n        :host {\n            display: table-row;\n        }\n        \n        :host collapsible-body,\n        :host td {\n            padding: 0;\n        }\n    "]
            },] },
];
/**
 * @nocollapse
 */
CollapsibleTableRowDetailComponent.ctorParameters = function () { return [
    { type: CollapsibleService, },
]; };
CollapsibleTableRowDetailComponent.propDecorators = {
    'expanded': [{ type: Input },],
    'viewListBodies': [{ type: ViewChildren, args: [CollapsibleBodyComponent,] },],
};

var CollapsibleModule = (function () {
    function CollapsibleModule() {
    }
    /**
     * @return {?}
     */
    CollapsibleModule.forRoot = function () {
        return {
            ngModule: CollapsibleModule,
            providers: [CollapsibleModule]
        };
    };
    return CollapsibleModule;
}());
CollapsibleModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    CollapsibleListComponent,
                    CollapsibleListItemComponent,
                    CollapsibleHeaderComponent,
                    CollapsibleBodyComponent,
                    CollapsibleTableComponent,
                    CollapsibleTableRowComponent,
                    CollapsibleTableRowDetailComponent
                ],
                exports: [
                    CollapsibleListComponent,
                    CollapsibleListItemComponent,
                    CollapsibleHeaderComponent,
                    CollapsibleBodyComponent,
                    CollapsibleTableComponent,
                    CollapsibleTableRowComponent,
                    CollapsibleTableRowDetailComponent
                ],
                providers: [
                    CollapsibleService,
                    CollapsibleEventService,
                    CollapsibleAnimationsService
                ]
            },] },
];
/**
 * @nocollapse
 */
CollapsibleModule.ctorParameters = function () { return []; };

export { CollapsibleModule, CollapsibleListComponent, CollapsibleListItemComponent, CollapsibleHeaderComponent, CollapsibleBodyComponent, CollapsibleTableComponent, CollapsibleTableRowComponent, CollapsibleTableRowDetailComponent, CollapsibleService, CollapsibleEvent, CollapsibleEventService, CollapsibleAnimationsService };
